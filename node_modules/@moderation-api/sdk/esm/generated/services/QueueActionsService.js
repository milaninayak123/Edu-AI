export class QueueActionsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * List actions
     * List actions for the current user.
     * @param queueId Only return actions available in this queue.
     * @returns any Successful response
     * @throws ApiError
     */
    actionsList(queueId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/actions',
            query: {
                'queueId': queueId,
            },
            errors: {
                400: `Error response`,
            },
        });
    }
    /**
     * Create an action
     * Create an action.
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    actionsCreate(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/actions',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Error response`,
            },
        });
    }
    /**
     * Get an action
     * Get an action by ID.
     * @param id The ID of the action to get.
     * @returns any Successful response
     * @throws ApiError
     */
    actionsGet(id) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/actions/{id}',
            path: {
                'id': id,
            },
            errors: {
                400: `Error response`,
            },
        });
    }
    /**
     * Update an action
     * Update an action.
     * @param id The ID of the action to update.
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    actionsUpdate(id, requestBody) {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/actions/{id}',
            path: {
                'id': id,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Error response`,
            },
        });
    }
    /**
     * Delete an action
     * Delete an action and all of its webhooks.
     * @param id The ID of the action to delete.
     * @returns any Successful response
     * @throws ApiError
     */
    actionsDelete(id) {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/actions/{id}',
            path: {
                'id': id,
            },
            errors: {
                400: `Error response`,
            },
        });
    }
    /**
     * Execute an action
     * Execute an action on a set of content items in a queue.
     * @param actionId The ID of the action to execute.
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    actionsExecute(actionId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/actions/{actionId}/execute',
            path: {
                'actionId': actionId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Error response`,
            },
        });
    }
}
