import * as crypto from 'crypto';
import { ModerationAPI as ModerationAPIClient } from './generated';
/**
 * A client for the Moderation API.
 */
class ModerationAPI {
    /**
     * Creates a new ModerationAPI instance.
     * @param key - The API key.
     * @param url - The API URL of Moderation API. Mainly used to configure a custom region - message us at support@moderationapi.com if you need this.
     */
    constructor({ key, url }) {
        /**
         * The webhook methods.
         */
        this.webhooks = {
            constructEvent: handleWebhookSigning,
        };
        this.client = new ModerationAPIClient({
            TOKEN: key,
            BASE: url,
        });
        this.moderate = {
            text: this.client.moderate.moderationText.bind(this.client.moderate),
            image: this.client.moderate.moderationImage.bind(this.client.moderate),
            video: this.client.moderate.moderationVideo.bind(this.client.moderate),
            audio: this.client.moderate.moderationAudio.bind(this.client.moderate),
        };
        this.queueActions = {
            list: this.client.queueActions.actionsList.bind(this.client.queueActions),
            get: this.client.queueActions.actionsGet.bind(this.client.queueActions),
            create: this.client.queueActions.actionsCreate.bind(this.client.queueActions),
            update: this.client.queueActions.actionsUpdate.bind(this.client.queueActions),
            delete: this.client.queueActions.actionsDelete.bind(this.client.queueActions),
            execute: this.client.queueActions.actionsExecute.bind(this.client.queueActions),
        };
    }
}
/**
 * The webhook types.
 */
export var WebhookType;
(function (WebhookType) {
    WebhookType["QUEUE_ITEM_NEW"] = "QUEUE_ITEM_NEW";
    WebhookType["QUEUE_ITEM_ACTION"] = "QUEUE_ITEM_ACTION";
    WebhookType["QUEUE_ITEM_COMPLETED"] = "QUEUE_ITEM_COMPLETED";
})(WebhookType || (WebhookType = {}));
/**
 * Verifies the signature of a webhook payload and returns the payload if it's valid.
 * @param webhookRawBody - The raw body of the webhook request.
 * @param webhookSignatureHeader - The signature header of the webhook request.
 * @param webhookSecret - The secret used to sign the webhook request. Find this in your webhook settings.
 * @returns The payload of the webhook request if the signature is valid.
 * @throws An error if the signature is invalid.
 */
const handleWebhookSigning = (webhookRawBody, webhookSignatureHeader, webhookSecret) => {
    const rawBody = webhookRawBody.toString('utf8');
    // The signature provided by Moderation API
    const signature = Buffer.from(webhookSignatureHeader, 'utf8');
    if (signature.length > 0) {
        const digest = Buffer.from(crypto
            .createHmac('sha256', webhookSecret)
            .update(rawBody)
            .digest('hex'), 'utf8');
        // Compare the provided signature to the one we generated
        const isValid = signature.length == digest.length &&
            crypto.timingSafeEqual(signature, digest);
        if (!isValid) {
            throw new Error(`Request body digest (${digest}) did not match modapi-signature (${signature})`);
        }
    }
    const payload = JSON.parse(rawBody);
    return payload;
};
export default ModerationAPI;
