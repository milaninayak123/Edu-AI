import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export declare class QueueActionsService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * List actions
     * List actions for the current user.
     * @param queueId Only return actions available in this queue.
     * @returns any Successful response
     * @throws ApiError
     */
    actionsList(queueId?: string): CancelablePromise<Array<{
        /**
         * The ID of the action.
         */
        id: string;
        /**
         * The date the action was created.
         */
        createdAt: string;
        /**
         * The name of the action.
         */
        name: string;
        /**
         * The description of the action.
         */
        description?: string | null;
        /**
         * Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.
         */
        queueBehaviour?: 'REMOVE' | 'ADD' | 'NO_CHANGE';
        /**
         * The IDs of the queues the action is available in.
         */
        filterInQueueIds?: Array<string>;
        /**
         * Show the action in all queues, selected queues or no queues (to use via API only).
         */
        position?: 'ALL_QUEUES' | 'SOME_QUEUES' | 'HIDDEN';
        /**
         * The possible values of the action. The user will be prompted to select one of these values when executing the action.
         */
        possibleValues?: Array<{
            /**
             * The value of the action.
             */
            value: string;
        }>;
        /**
         * Whether the action requires a value to be executed.
         */
        valueRequired?: boolean;
        /**
         * Whether the action allows any text to be entered as a value or if it must be one of the possible values.
         */
        freeText?: boolean;
    }>>;
    /**
     * Create an action
     * Create an action.
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    actionsCreate(requestBody: {
        /**
         * The name of the action.
         */
        name: string;
        /**
         * The description of the action.
         */
        description?: string | null;
        /**
         * Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.
         */
        queueBehaviour?: 'REMOVE' | 'ADD' | 'NO_CHANGE';
        /**
         * The IDs of the queues the action is available in.
         */
        filterInQueueIds?: Array<string>;
        /**
         * Show the action in all queues, selected queues or no queues (to use via API only).
         */
        position?: 'ALL_QUEUES' | 'SOME_QUEUES' | 'HIDDEN';
        /**
         * The possible values of the action. The user will be prompted to select one of these values when executing the action.
         */
        possibleValues?: Array<{
            /**
             * The value of the action.
             */
            value: string;
        }>;
        /**
         * Whether the action requires a value to be executed.
         */
        valueRequired?: boolean;
        /**
         * Whether the action allows any text to be entered as a value or if it must be one of the possible values.
         */
        freeText?: boolean;
        /**
         * The action's webhooks.
         */
        webhooks?: Array<{
            /**
             * The webhook's name, used to identify it in the dashboard
             */
            name: string;
            /**
             * The webhook's description
             */
            description?: string | null;
            /**
             * The webhook's URL. We'll call this URL when the event occurs.
             */
            url: string;
            /**
             * ID of an existing webhook or undefined if this is a new webhook.
             */
            id?: string;
        }>;
    }): CancelablePromise<{
        /**
         * The ID of the action.
         */
        id: string;
        /**
         * The date the action was created.
         */
        createdAt: string;
        /**
         * The name of the action.
         */
        name: string;
        /**
         * The description of the action.
         */
        description?: string | null;
        /**
         * Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.
         */
        queueBehaviour?: 'REMOVE' | 'ADD' | 'NO_CHANGE';
        /**
         * The IDs of the queues the action is available in.
         */
        filterInQueueIds?: Array<string>;
        /**
         * Show the action in all queues, selected queues or no queues (to use via API only).
         */
        position?: 'ALL_QUEUES' | 'SOME_QUEUES' | 'HIDDEN';
        /**
         * The possible values of the action. The user will be prompted to select one of these values when executing the action.
         */
        possibleValues?: Array<{
            /**
             * The value of the action.
             */
            value: string;
        }>;
        /**
         * Whether the action requires a value to be executed.
         */
        valueRequired?: boolean;
        /**
         * Whether the action allows any text to be entered as a value or if it must be one of the possible values.
         */
        freeText?: boolean;
    }>;
    /**
     * Get an action
     * Get an action by ID.
     * @param id The ID of the action to get.
     * @returns any Successful response
     * @throws ApiError
     */
    actionsGet(id: string): CancelablePromise<{
        /**
         * The ID of the action.
         */
        id: string;
        /**
         * The date the action was created.
         */
        createdAt: string;
        /**
         * The name of the action.
         */
        name: string;
        /**
         * The description of the action.
         */
        description?: string | null;
        /**
         * Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.
         */
        queueBehaviour?: 'REMOVE' | 'ADD' | 'NO_CHANGE';
        /**
         * The IDs of the queues the action is available in.
         */
        filterInQueueIds?: Array<string>;
        /**
         * Show the action in all queues, selected queues or no queues (to use via API only).
         */
        position?: 'ALL_QUEUES' | 'SOME_QUEUES' | 'HIDDEN';
        /**
         * The possible values of the action. The user will be prompted to select one of these values when executing the action.
         */
        possibleValues?: Array<{
            /**
             * The value of the action.
             */
            value: string;
        }>;
        /**
         * Whether the action requires a value to be executed.
         */
        valueRequired?: boolean;
        /**
         * Whether the action allows any text to be entered as a value or if it must be one of the possible values.
         */
        freeText?: boolean;
        /**
         * The action's webhooks.
         */
        webhooks?: Array<{
            /**
             * The webhook's name, used to identify it in the dashboard
             */
            name: string;
            /**
             * The webhook's description
             */
            description?: string | null;
            /**
             * The webhook's URL. We'll call this URL when the event occurs.
             */
            url: string;
            /**
             * The ID of the moderation action to trigger the webhook on. Only used for moderation action webhooks.
             */
            moderationActionId?: string | null;
            /**
             * The ID of the webhook.
             */
            id: string;
        }>;
    }>;
    /**
     * Update an action
     * Update an action.
     * @param id The ID of the action to update.
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    actionsUpdate(id: string, requestBody: {
        /**
         * The name of the action.
         */
        name?: string;
        /**
         * The description of the action.
         */
        description?: string | null;
        /**
         * Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.
         */
        queueBehaviour?: 'REMOVE' | 'ADD' | 'NO_CHANGE';
        /**
         * The IDs of the queues the action is available in.
         */
        filterInQueueIds?: Array<string>;
        /**
         * Show the action in all queues, selected queues or no queues (to use via API only).
         */
        position?: 'ALL_QUEUES' | 'SOME_QUEUES' | 'HIDDEN';
        /**
         * The possible values of the action. The user will be prompted to select one of these values when executing the action.
         */
        possibleValues?: Array<{
            /**
             * The value of the action.
             */
            value: string;
        }>;
        /**
         * Whether the action requires a value to be executed.
         */
        valueRequired?: boolean;
        /**
         * Whether the action allows any text to be entered as a value or if it must be one of the possible values.
         */
        freeText?: boolean;
        /**
         * The action's webhooks.
         */
        webhooks?: Array<{
            /**
             * The webhook's name, used to identify it in the dashboard
             */
            name: string;
            /**
             * The webhook's description
             */
            description?: string | null;
            /**
             * The webhook's URL. We'll call this URL when the event occurs.
             */
            url: string;
            /**
             * ID of an existing webhook or undefined if this is a new webhook.
             */
            id?: string;
        }>;
    }): CancelablePromise<{
        /**
         * The ID of the action.
         */
        id: string;
        /**
         * The date the action was created.
         */
        createdAt: string;
        /**
         * The name of the action.
         */
        name: string;
        /**
         * The description of the action.
         */
        description?: string | null;
        /**
         * Whether the action resolves and removes the item, unresolves and re-add it to the queue, or does not change the resolve status.
         */
        queueBehaviour?: 'REMOVE' | 'ADD' | 'NO_CHANGE';
        /**
         * The IDs of the queues the action is available in.
         */
        filterInQueueIds?: Array<string>;
        /**
         * Show the action in all queues, selected queues or no queues (to use via API only).
         */
        position?: 'ALL_QUEUES' | 'SOME_QUEUES' | 'HIDDEN';
        /**
         * The possible values of the action. The user will be prompted to select one of these values when executing the action.
         */
        possibleValues?: Array<{
            /**
             * The value of the action.
             */
            value: string;
        }>;
        /**
         * Whether the action requires a value to be executed.
         */
        valueRequired?: boolean;
        /**
         * Whether the action allows any text to be entered as a value or if it must be one of the possible values.
         */
        freeText?: boolean;
    }>;
    /**
     * Delete an action
     * Delete an action and all of its webhooks.
     * @param id The ID of the action to delete.
     * @returns any Successful response
     * @throws ApiError
     */
    actionsDelete(id: string): CancelablePromise<{
        /**
         * Whether the action was deleted.
         */
        deleted: boolean;
        /**
         * The ID of the action.
         */
        id: string;
    }>;
    /**
     * Execute an action
     * Execute an action on a set of content items in a queue.
     * @param actionId The ID of the action to execute.
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    actionsExecute(actionId: string, requestBody: {
        /**
         * The IDs of the content items to perform the action on.
         */
        contentIds: Array<string>;
        /**
         * The ID of the queue the action was performed from if any.
         */
        queueId?: string;
        /**
         * The value of the action. Useful to set a reason for the action etc.
         */
        value?: string;
    }): CancelablePromise<{
        /**
         * Action executed successfully.
         */
        success: boolean;
        /**
         * The ID of the action.
         */
        actionId: string;
        /**
         * The IDs of the content items.
         */
        ids: Array<string>;
    }>;
}
