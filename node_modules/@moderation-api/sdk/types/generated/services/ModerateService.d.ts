import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export declare class ModerateService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Analyze text.
     * Analyze text with your Moderation API project.
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    moderationText(requestBody: {
        /**
         * The text you'd like to analyze. We recommend to submit plain text or HTML
         */
        value: string;
        /**
         * Do not store the content. The content won't enter the review queue
         */
        doNotStore?: boolean;
        /**
         * The author of the content.
         */
        authorId?: string;
        /**
         * For example the ID of a chat room or a post
         */
        contextId?: string;
        /**
         * Any metadata you want to store with the content
         */
        metadata?: Record<string, any>;
    }): CancelablePromise<({
        /**
         * Success if the request was successful
         */
        status: string;
        /**
         * The ID of the content. Only returned if the content was stored.
         */
        contentId?: string;
        /**
         * Information about the request
         */
        request: {
            /**
             * The timestamp of the request
             */
            timestamp: number;
            /**
             * The quota usage of the request
             */
            quota_usage: number;
        };
        /**
         * Whether the content was moderated or not. Same as `content` !== `original`
         */
        content_moderated: boolean;
        /**
         * Whether any entity matchers found data for the content
         */
        data_found: boolean;
        /**
         * Whether the content was flagged by any models
         */
        flagged: boolean;
        /**
         * The original content
         */
        original: string;
        /**
         * The content after moderation. With all mask replacements applied.
         */
        content: string;
        /**
         * The NSFW model output if enabled in your project. Read more at https://docs.moderationapi.com/models/nsfw
         */
        nsfw?: {
            /**
             * The label of the model
             */
            label?: string;
            /**
             * The confidence of the model
             */
            score?: number;
            /**
             * Indicates an error with the model
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate
             */
            warning?: string;
            /**
             * The confidence of all labels
             */
            label_scores?: {
                /**
                 * Mentions religion, politics, race, etc., but is neutral or positive.
                 */
                SENSITIVE?: number;
                /**
                 * Sexual, hateful, profane, and inappropriate content.
                 */
                UNSAFE?: number;
                NEUTRAL?: number;
            };
        };
        /**
         * The toxicity model output if enabled in your project. Read more at https://docs.moderationapi.com/models/toxicity
         */
        toxicity?: {
            /**
             * The label of the model
             */
            label?: string;
            /**
             * The confidence of the model
             */
            score?: number;
            /**
             * Indicates an error with the model
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate
             */
            warning?: string;
            /**
             * The confidence of all labels
             */
            label_scores: {
                /**
                 * Rude or disrespectful content.
                 */
                TOXICITY?: number;
                /**
                 * Swearing, curse words, and other obscene language.
                 */
                PROFANITY?: number;
                /**
                 * Discrimination of race, religion, gender, etc.
                 */
                DISCRIMINATION?: number;
                /**
                 * Very hateful and aggressive content.
                 */
                SEVERE_TOXICITY?: number;
                /**
                 * Negative comments about looks or personality etc.
                 */
                INSULT?: number;
                /**
                 * Content containing intention to harm or violence.
                 */
                THREAT?: number;
                NEUTRAL?: number;
            };
        };
        /**
         * The spam model output if enabled in your project. Read more at https://docs.moderationapi.com/models/spam
         */
        quality?: {
            /**
             * The label of the model
             */
            label?: string;
            /**
             * The confidence of the model
             */
            score?: number;
            /**
             * Indicates an error with the model
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate
             */
            warning?: string;
            /**
             * The confidence of all labels
             */
            label_scores?: {
                /**
                 * Trivial or short content.
                 */
                UNSUBSTANTIAL?: number;
                /**
                 * Difficult to understand, nonsensical.
                 */
                INCOHERENT?: number;
                /**
                 * Irrelevant and unsolicited commercial content.
                 */
                SPAM?: number;
                NEUTRAL?: number;
            };
        };
        /**
         * The sentiment model output if enabled in your project. Read more at https://docs.moderationapi.com/models/sentiment
         */
        sentiment?: {
            /**
             * The label of the model
             */
            label?: string;
            /**
             * The confidence of the model
             */
            score?: number;
            /**
             * Indicates an error with the model
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate
             */
            warning?: string;
            /**
             * The confidence of all labels
             */
            label_scores?: {
                /**
                 * Positive sentiment.
                 */
                POSITIVE?: number;
                /**
                 * Negative sentiment.
                 */
                NEGATIVE?: number;
                NEUTRAL?: number;
            };
        };
        /**
         * The propriety model output if enabled in your project. Read more at https://docs.moderationapi.com/models/propriety
         */
        propriety?: {
            /**
             * The label of the model
             */
            label?: string;
            /**
             * The confidence of the model
             */
            score?: number;
            /**
             * Indicates an error with the model
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate
             */
            warning?: string;
            /**
             * The confidence of all labels
             */
            label_scores?: {
                /**
                 * Pickup lines, compliments on appearance, etc.
                 */
                FLIRTATION?: number;
                /**
                 * References to sexual acts, body parts, etc.
                 */
                SEXUALLY_EXPLICIT?: number;
                NEUTRAL?: number;
            };
        };
        /**
         * The email entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/email
         */
        email?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
        /**
         * The phone entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/phone
         */
        phone?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
        /**
         * The url entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/url
         */
        url?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
        /**
         * The address entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/address
         */
        address?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
        /**
         * The name entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/name
         */
        name?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
        /**
         * The username entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/username
         */
        username?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
        /**
         * The profanity entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/profanity
         */
        profanity?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
        /**
         * The sensitive numbers entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/sensitive
         */
        sensitive?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
        /**
         * The wordlist entity matcher output if enabled in your project. Read more at https://docs.moderationapi.com/models/word
         */
        wordlist?: {
            /**
             * The detection mode.
             */
            mode?: 'NORMAL' | 'SUSPICIOUS' | 'PARANOID';
            /**
             * Whether a match was found or not.
             */
            found?: boolean;
            /**
             * The matches of the entity matcher.
             */
            matches?: Array<string>;
            /**
             * The components of the matcher.
             */
            components?: any;
            /**
             * Indicates an error with the matcher.
             */
            error?: string;
            /**
             * Indicates a warning from the model, e.g. if the text is too short or long and the model might not be accurate.
             */
            warning?: string;
        };
    })>;
    /**
     * Analyze image
     * Analyze image with your Moderation API project
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    moderationImage(requestBody: {
        /**
         * Do not store the content. The content won't enter the review queue
         */
        doNotStore?: boolean;
        /**
         * The author of the content.
         */
        authorId?: string;
        /**
         * For example the ID of a chat room or a post
         */
        contextId?: string;
        /**
         * Any metadata you want to store with the content
         */
        metadata?: Record<string, any>;
        /**
         * The URL of the image you want to analyze.
         */
        url: string;
    }): CancelablePromise<{
        /**
         * Success if the request was successful
         */
        status: string;
        /**
         * The ID of the content. Only returned if the content was stored.
         */
        contentId?: string;
        /**
         * Information about the request
         */
        request: {
            /**
             * The timestamp of the request
             */
            timestamp: number;
            /**
             * The quota usage of the request
             */
            quota_usage: number;
        };
        /**
         * Whether the content was flagged by any models
         */
        flagged: boolean;
        /**
         * The confidence of all labels
         */
        labels: Array<{
            /**
             * The label of the model
             */
            label: 'nudity' | 'suggestive' | 'gore' | 'hate' | 'violence' | 'weapon' | 'smoking' | 'drugs' | 'alcohol' | 'text';
            /**
             * The confidence of the model
             */
            score: number;
        }>;
        /**
         * The texts found in the image, if the image text model is enabled
         */
        texts?: Array<string>;
    }>;
    /**
     * Analyze video
     * Analyze video with your Moderation API project
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    moderationVideo(requestBody: {
        /**
         * Do not store the content. The content won't enter the review queue
         */
        doNotStore?: boolean;
        /**
         * The author of the content.
         */
        authorId?: string;
        /**
         * For example the ID of a chat room or a post
         */
        contextId?: string;
        /**
         * Any metadata you want to store with the content
         */
        metadata?: Record<string, any>;
        /**
         * The URL of the video you want to analyze.
         */
        url: string;
    }): CancelablePromise<{
        /**
         * Success if the request was successful
         */
        status: string;
        /**
         * The ID of the content. Only returned if the content was stored.
         */
        contentId?: string;
        /**
         * Information about the request
         */
        request: {
            /**
             * The timestamp of the request
             */
            timestamp: number;
            /**
             * The quota usage of the request
             */
            quota_usage: number;
        };
        /**
         * Whether the content was flagged by any models
         */
        flagged: boolean;
    }>;
    /**
     * Analyze audio
     * Analyze audio with your Moderation API project
     * @param requestBody
     * @returns any Successful response
     * @throws ApiError
     */
    moderationAudio(requestBody: {
        /**
         * Do not store the content. The content won't enter the review queue
         */
        doNotStore?: boolean;
        /**
         * The author of the content.
         */
        authorId?: string;
        /**
         * For example the ID of a chat room or a post
         */
        contextId?: string;
        /**
         * Any metadata you want to store with the content
         */
        metadata?: Record<string, any>;
        /**
         * The URL of the audio you want to analyze.
         */
        url: string;
    }): CancelablePromise<{
        /**
         * Success if the request was successful
         */
        status: string;
        /**
         * The ID of the content. Only returned if the content was stored.
         */
        contentId?: string;
        /**
         * Information about the request
         */
        request: {
            /**
             * The timestamp of the request
             */
            timestamp: number;
            /**
             * The quota usage of the request
             */
            quota_usage: number;
        };
        /**
         * Whether the content was flagged by any models
         */
        flagged: boolean;
    }>;
}
