/// <reference types="node" />
import { ModerationAPI as ModerationAPIClient } from './generated';
/**
 * A client for the Moderation API.
 */
declare class ModerationAPI {
    /**
     * The Moderation API client.
     */
    private client;
    /**
     * The moderation methods.
     */
    moderate: {
        text: typeof ModerationAPIClient.prototype.moderate.moderationText;
        image: typeof ModerationAPIClient.prototype.moderate.moderationImage;
        video: typeof ModerationAPIClient.prototype.moderate.moderationVideo;
        audio: typeof ModerationAPIClient.prototype.moderate.moderationAudio;
    };
    /**
     * The queue actions methods.
     */
    queueActions: {
        list: typeof ModerationAPIClient.prototype.queueActions.actionsList;
        get: typeof ModerationAPIClient.prototype.queueActions.actionsGet;
        create: typeof ModerationAPIClient.prototype.queueActions.actionsCreate;
        update: typeof ModerationAPIClient.prototype.queueActions.actionsUpdate;
        delete: typeof ModerationAPIClient.prototype.queueActions.actionsDelete;
        execute: typeof ModerationAPIClient.prototype.queueActions.actionsExecute;
    };
    /**
     * The webhook methods.
     */
    webhooks: {
        constructEvent: (webhookRawBody: Buffer, webhookSignatureHeader: string, webhookSecret: string) => WebhookPayload;
    };
    /**
     * Creates a new ModerationAPI instance.
     * @param key - The API key.
     * @param url - The API URL of Moderation API. Mainly used to configure a custom region - message us at support@moderationapi.com if you need this.
     */
    constructor({ key, url }: {
        key: string;
        url?: string;
    });
}
/**
 * The webhook types.
 */
export declare enum WebhookType {
    QUEUE_ITEM_NEW = "QUEUE_ITEM_NEW",
    QUEUE_ITEM_ACTION = "QUEUE_ITEM_ACTION",
    QUEUE_ITEM_COMPLETED = "QUEUE_ITEM_COMPLETED"
}
/**
 * The webhook payload.
 */
export type WebhookPayload = {
    id: string;
    type: WebhookType;
    timestamp: number;
    item: {
        id: string;
        flagged: boolean;
        labels: {
            label: string;
            score: number;
            flagged: boolean;
            manual: boolean;
        }[];
        language: string;
        content: string;
        timestamp: number;
        metadata?: Record<string, any>;
        contextId?: string;
        authorId?: string;
    };
    queue?: {
        id: string;
        name: string;
    };
    action?: {
        id: string;
        name: string;
        value: string;
    };
};
export default ModerationAPI;
